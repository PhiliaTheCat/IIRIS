#ifndef __INCLUDED_PIC__
#define __INCLUDED_PIC__

#include <cstdint>

namespace ptc
{
    class Pic
    {
        private:
        uint32_t height;
        uint32_t width;

        uint8_t *mat;

        public:
        inline Pic::Pic(const uint32_t &__height = 0, const uint32_t &__width = 0) noexcept(false)
        : height(__height), width(__width)
        {
            mat = new uint8_t [256 * 256] {};
            if (mat == nullptr)
                throw "Allocation failed!";
        }

        Pic(const Pic &src) noexcept(false);

        inline Pic(Pic &&src)
        : height(src.height), width(src.width), mat(src.mat)
        {
            src.mat = nullptr;
        }

        inline ~Pic()
        {
            if (mat != nullptr)
                delete [] mat;
        }

        Pic &operator =(const Pic &rhs);
        Pic &operator =(Pic &&rhs);

        inline uint32_t get_height() const
        {
            return height;
        }

        inline uint32_t get_width() const
        {
            return width;
        }

        inline uint8_t *get_mat() const
        {
            return mat;
        }

        inline uint8_t *operator [](const uint32_t &x) const noexcept(false)
        {
            if (x >= height)
                throw "Invalid row index!";
            return &mat[x * width];
        }
    };
}

#endif
